package application;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;

public class SaveTest
{
	/**
	 * <b>toFile</b><br>
	 * <br>
	 * Opens the FileDialog and asks a user to select a path to save the file.<br>
	 * If a file path is specified, then the HTML file is generated by calling createHtmlString().<br>
	 */
	public static void toFile()
	{
		// https://docs.oracle.com/javase/8/javafx/api/javafx/stage/FileChooser.html
		FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Save Test Case");
        //Extension filter
        FileChooser.ExtensionFilter extentionFilter = new FileChooser.ExtensionFilter("HTML (*.html)", "*.html");
        fileChooser.getExtensionFilters().add(extentionFilter);
		File fileName = fileChooser.showSaveDialog(null);
		if (fileName != null)
		{
			//System.out.println("File Name: " + fileName); // DEBUGGING
			
			// Create a string that holds the content of the HTML file
			String content = createHtmlString();
			
			// Open the file and write its contents to the string (above)
			FileWriter fileWriter = null;
            try
            {
            	fileWriter = new FileWriter(fileName);
                fileWriter.write(content);
                fileWriter.close();
            } catch (IOException e)
            {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * <b>createHtmlString</b><br>
	 * <br>
	 * Creates HTML (Selenium IDE format) from the test steps.<br>
	 * <br>
	 * @return Sting - HTML Content
	 */
	private static String createHtmlString()
	{
		String testName = "SeleiumnTest";
		
		String newLine = System.getProperty("line.separator"); // New in Java 7
		StringBuilder sb = new StringBuilder();
		sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		sb.append(newLine);
		sb.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">");
		sb.append(newLine);
		sb.append("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">");
		sb.append(newLine);
		sb.append("<head profile=\"http://selenium-ide.openqa.org/profiles/test-case\">");
		sb.append(newLine);
		sb.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />");
		sb.append(newLine);
		// Get BaseAddress
		String baseAddress = TestStepsPane.baseAddresstextField.getText();
		// Continue writing the HTML file
		sb.append("<link rel=\"selenium.base\" href=\"" + baseAddress + "\" />");
		sb.append(newLine);
		sb.append("<title>" + testName +"</title>");
		sb.append(newLine);
		sb.append("</head>");
		sb.append(newLine);
		sb.append("<body>");
		sb.append(newLine);
		sb.append("<table cellpadding=\"1\" cellspacing=\"1\" border=\"1\">");
		sb.append(newLine);
		sb.append("<thead>");
		sb.append(newLine);
		sb.append("<tr><td rowspan=\"1\" colspan=\"3\">" + testName + "</td></tr>"); // TODO: This needs to be dynamic at some point
		sb.append(newLine);
		sb.append("</thead><tbody>");
		sb.append(newLine);
		
		// Get Test Step(s). See StepBuilder.AddTestSteps() for step step structure 
		ObservableList<Node> testSteps = TestStepsPane.testStepsVbox.getChildren();
		int stepCount = testSteps.size();
		
		// For each test step in the Test Steps panel...
		for (int i = 0; i < stepCount; i++)
		{			
			// Get "hbox2" added from StepBuilder.AddTestSteps()
			HBox testStepContainer = (HBox) testSteps.get(i);
			// Get the children of testStepContainer
			ObservableList<Node> testStepChildren = testStepContainer.getChildren();
			// Get "vbox" added from StepBuilder.AddTestSteps()
			VBox testStepVBox = (VBox) testStepChildren.get(0);
			// Get the children of testStepVBox
			ObservableList<Node> testStepVBoxChildren = testStepVBox.getChildren();
			// Get "newDescription" added from in StepBuilder.AddTestSteps()
			String description = ((TextField) testStepVBoxChildren.get(0)).getText();
			sb.append("<!--" + description + "-->");
			sb.append(newLine);
			// Get "hbox" added from StepBuilder.AddTestSteps()
			HBox commandHBox = (HBox) testStepVBoxChildren.get(1);
			// Start a table row
			sb.append("<tr>");
			sb.append(newLine);
			// Get the children of the commandHBox
			ObservableList<Node> testStepHBoxChildren = commandHBox.getChildren();
			// Get the values of the command and write them as table cells
			@SuppressWarnings("rawtypes")
			String command = (String) ((ComboBox)testStepHBoxChildren.get(0)).getValue();
			sb.append("	<td>" + command + "</td>");
			sb.append(newLine);
			String target = (String) ((TextField)testStepHBoxChildren.get(1)).getText();
			sb.append("	<td>" + target + "</td>");
			sb.append(newLine);
			String value = (String) ((TextField)testStepHBoxChildren.get(2)).getText();
			sb.append("	<td>" + value + "</td>");
			sb.append(newLine);
			
			// End the table row
			sb.append("</tr>");
			sb.append(newLine);
		}
		
		// Finish the HTML file
		sb.append("</tbody></table>");
		sb.append(newLine);
		sb.append("</body>");
		sb.append(newLine);
		sb.append("</html>");
		
		return sb.toString();
	}
}